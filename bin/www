#!/usr/bin/env node


let app = require('../app');
let debug = require('debug')('blog:server');
let http = require('http');


let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


console.info("Идет инициализация сервера...");
let server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.info("Сервер проинициализирован.");

/*
    Реализация слушателя события от клиента receivedFromClient
 */
let io = require('socket.io')(server);

io.on('connection', function (socket) {
    console.log('Соединение установлено');
    socket.join('game');

    io.in('game').emit('sendToClient', 'От сервера: ' + new Date());
    //socket.emit('sendToClient', 'От сервера: ' + new Date());

    socket.on('receivedFromClient', function (data) {
        console.log(data);
    });
});

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
